{
	"info": {
		"_postman_id": "0e7b209c-010b-4dcf-82a2-131a3ed01888",
		"name": "Petstore_Aleksey",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16864105"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.text();\r",
									"pm.environment.set(\"PetId\", responseData.slice(6, 25));\r",
									"\r",
									"pm.test(\"Body contains valid name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bobic_Qa\");\r",
									"});\r",
									"\r",
									"pm.test(\"Category id is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.id).to.eql(12);\r",
									"});\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"category\",\r",
									"       \r",
									"        \"photoUrls\",\r",
									"        \"tags\",\r",
									"        \"status\"\r",
									"       ],\r",
									"    \r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"            \r",
									"        },\r",
									"        \"category\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"    \r",
									"        \"photoUrls\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"tags\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"status\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"}\r",
									"\r",
									"pm.test(\"json schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema)\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 12,\r\n    \"name\": \"dogs\"\r\n  },\r\n  \"name\": \"Bobic_Qa\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 10,\r\n      \"name\": \"5%\"\r\n    },\r\n    { \"id\": 11,\r\n      \"name\": \"10%\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/pet",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains valid name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"sold\");\r",
									"});\r",
									"\r",
									"pm.test(\"Category name is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category.name).to.eql(\"dogs\");\r",
									"});\r",
									"\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"category\",\r",
									"        \"name\",\r",
									"        \"photoUrls\",\r",
									"        \"tags\",\r",
									"        \"status\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"category\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"photoUrls\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"tags\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"status\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"json schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/pet/{{PetId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"pet",
								"{{PetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains valid name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Ronda-Donda\");\r",
									"});\r",
									"\r",
									"pm.test(\"animal name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Ronda-Donda\");\r",
									"});\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"category\",\r",
									"        \"name\",\r",
									"        \"photoUrls\",\r",
									"        \"tags\",\r",
									"        \"status\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"category\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"name\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"photoUrls\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"tags\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"status\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"json schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{PetId}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"dogs_donda\"\r\n  },\r\n  \"name\": \"Ronda-Donda\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/pet",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains valid name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"unknown\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data type\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"});\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"code\",\r",
									"        \"type\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"code\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"json schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "special-key",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseUrl}}/pet/{{PetId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"pet",
								"{{PetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID (after delete)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains valid name\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Pet not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Pet not found\");\r",
									"});\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"code\",\r",
									"        \"type\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"code\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"type\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"json schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/pet/{{PetId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"pet",
								"{{PetId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}